# masters/middleware.py
from django.shortcuts import redirect
from django.urls import resolve, reverse
from .utils.roles import user_role  # ‚úÖ on utilise la fonction unifi√©e


class MasterAccessMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        user = request.user
        path = request.path.lower()

        # =======================================================
        # 0Ô∏è‚É£ LAISSER PASSER LES ROUTES PUBLIQUES ET INTERNES SP√âCIALES
        # =======================================================
        if (
            path.startswith("/masters/messenger/") or  # üü¢ App Messenger int√©gr√©e
            path.startswith("/ws/") or                 # üü¢ WebSockets (Channels)
            path.startswith("/admin/") or              # üü¢ Admin Django
            path.startswith("/static/") or             # üü¢ Fichiers statiques
            path.startswith("/media/")                 # üü¢ Fichiers m√©dias (ex: enregistrements)
        ):
            return self.get_response(request)

        # =======================================================
        # 1Ô∏è‚É£ OBLIGATION DE CHANGEMENT DE MOT DE PASSE
        # =======================================================
        if (
            user.is_authenticated
            and hasattr(user, "userprofile")
            and getattr(user.userprofile, "must_change_password", False)
            and not request.path.startswith(reverse("masters:force_password_change"))
            and not request.path.startswith("/admin")
        ):
            return redirect("masters:force_password_change")

        # =======================================================
        # 2Ô∏è‚É£ REDIRECTION AUTO √Ä L‚ÄôENTR√âE DU PORTAIL MASTER
        # =======================================================
        try:
            if user.is_authenticated and resolve(request.path_info).url_name == "portal":
                role = user_role(user)
                if role == "student":
                    return redirect("masters:student_dashboard")
                elif role == "instructor":
                    return redirect("masters:dashboard")
                elif role == "staff_admin":
                    return redirect("masters:dashboard")
        except Exception:
            pass

        # =======================================================
        # 3Ô∏è‚É£ PROTECTION DES ROUTES SELON LE R√îLE
        # =======================================================
        if user.is_authenticated:
            role = user_role(user)

            # √âtudiant : acc√®s uniquement √† son espace
            if role == "student" and (
                "/teacher/" in path or "/manage/" in path or "/finance/" in path
            ):
                return redirect("masters:student_dashboard")

            # Enseignant : pas d‚Äôacc√®s aux zones staff
            if role == "instructor" and (
                "/manage/" in path or "/finance/" in path or "/staff/" in path
            ):
                return redirect("masters:dashboard")

            # Staff : pas d‚Äôacc√®s aux zones √©tudiants ou enseignants
            if role == "staff_admin" and (
                "/student/" in path or "/teacher/" in path
            ):
                return redirect("masters:dashboard")

        # =======================================================
        # 4Ô∏è‚É£ CONTINUER LA CHA√éNE DE MIDDLEWARES
        # =======================================================
        return self.get_response(request)

from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth import get_user_model
from django.utils.crypto import get_random_string
from django.core.mail import send_mail
from django.utils import timezone
from datetime import timedelta

from .models import Admission
from masters.models import MasterEnrollment, Cohort
from programs.models import Program

User = get_user_model()


# ============================================================
# üîÅ UTILITAIRE : r√©solution automatique du programme MASTER
# ============================================================
def resolve_master_program(source_program):
    """
    Si l'admission concerne une formation non-MASTER,
    tente de trouver le programme MASTER √©quivalent par titre.
    Retourne le programme MASTER ou None si introuvable.
    """
    if not source_program:
        return None

    # D√©j√† MASTER ‚Üí on renvoie tel quel
    if getattr(source_program, "cycle", "").upper() == "MASTER":
        return source_program

    # Recherche exacte ou partielle du programme MASTER √©quivalent
    exact = Program.objects.filter(title=source_program.title, cycle="MASTER").first()
    if exact:
        return exact

    return Program.objects.filter(title__icontains=source_program.title, cycle="MASTER").first()


# ============================================================
# üß† SIGNAL : Cr√©ation automatique du compte √©tudiant MASTER
# ============================================================
@receiver(post_save, sender=Admission)
def auto_create_student_account(sender, instance: Admission, created, **kwargs):
    """
    Lorsqu‚Äôune Admission passe au statut PAIEMENT_OK :
      ‚úÖ cr√©e ou relie un compte √©tudiant existant
      ‚úÖ mappe automatiquement le programme vers un cycle MASTER
      ‚úÖ cr√©e ou r√©cup√®re la cohorte (ann√©e scolaire)
      ‚úÖ cr√©e l‚Äôinscription MasterEnrollment correspondante
      ‚úÖ envoie le mail d‚Äôidentifiants si nouvel utilisateur
    """

    # 1Ô∏è‚É£ On agit uniquement quand le paiement est valid√©
    if instance.status != "PAIEMENT_OK":
        return

    # 2Ô∏è‚É£ On r√©cup√®re ou cr√©e le compte √©tudiant
    student = None
    if instance.email:
        student = User.objects.filter(email__iexact=instance.email).first()

    if not student:
        # Essai via pr√©nom+nom
        username_guess = (f"{instance.prenom}{instance.nom}".replace(" ", "").lower())[:30]
        student = User.objects.filter(username__iexact=username_guess).first()

    created_user = False
    temp_password = None

    if not student:
        username = instance.ref_code.lower()
        temp_password = get_random_string(8)

        student = User.objects.create_user(
            username=username,
            first_name=instance.prenom,
            last_name=instance.nom,
            email=instance.email or "",
            password=temp_password,
            role=User.Role.ETUDIANT,
        )
        created_user = True

        # Forcer le changement de mot de passe
        if hasattr(student, "userprofile"):
            student.userprofile.must_change_password = True
            student.userprofile.save(update_fields=["must_change_password"])

        print(f"[AUTO-STUDENT] √âtudiant cr√©√© : {student.username}")

    # 3Ô∏è‚É£ D√©terminer le programme MASTER correspondant
    program_master = resolve_master_program(instance.program)
    if not program_master:
        print(f"[‚ö†Ô∏è ERREUR] Aucun programme MASTER trouv√© pour {instance.program.title}.")
        return

    # 4Ô∏è‚É£ Cr√©er ou r√©cup√©rer la cohorte
    submitted_at = instance.submitted_at or timezone.now()
    start_year = submitted_at.year
    label = f"{start_year}-{start_year + 1}"
    start_date = submitted_at.date()
    end_date = start_date + timedelta(days=365)

    cohort, _ = Cohort.objects.get_or_create(
        label=label,
        defaults={"start_date": start_date, "end_date": end_date},
    )

    # 5Ô∏è‚É£ Cr√©er l‚Äôinscription MasterEnrollment (si absente)
    enrollment, created_enrollment = MasterEnrollment.objects.get_or_create(
        student=student,
        program=program_master,
        cohort=cohort,
        defaults={
            "admission": instance,
            "status": "ACTIVE",
        },
    )

    if created_enrollment:
        print(f"[AUTO-ENROLLMENT] {student.username} inscrit √† {program_master.title} ({cohort.label})")
    else:
        print(f"[INFO] {student.username} d√©j√† inscrit √† {program_master.title} ({cohort.label})")

    # 6Ô∏è‚É£ Envoi du mail si nouvel utilisateur
    if created_user and instance.email:
        try:
            send_mail(
                subject="Votre compte √©tudiant Master ESF√© a √©t√© cr√©√©",
                message=(
                    f"Bonjour {instance.prenom},\n\n"
                    f"Votre compte √©tudiant ESF√© Master a √©t√© cr√©√© avec succ√®s.\n"
                    f"Identifiant : {student.username}\n"
                    f"Mot de passe temporaire : {temp_password}\n\n"
                    "Merci de vous connecter et de changer imm√©diatement votre mot de passe.\n\n"
                    "Cordialement,\n√âquipe ESF√© Mali"
                ),
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[instance.email],
                fail_silently=True,
            )
            print(f"[MAIL] Identifiants envoy√©s √† {instance.email}")
        except Exception as e:
            print(f"[‚ö†Ô∏è MAIL NON ENVOY√â] {e}")
